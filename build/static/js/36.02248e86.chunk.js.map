{"version":3,"sources":["../node_modules/qr.js/lib/mode.js","../node_modules/qr.js/lib/ErrorCorrectLevel.js","../node_modules/qr.js/lib/Polynomial.js","../node_modules/qr.js/lib/math.js","../node_modules/react-qr-code/lib/index.js","../node_modules/qr.js/lib/QRCode.js","../node_modules/qr.js/lib/8BitByte.js","../node_modules/qr.js/lib/RSBlock.js","../node_modules/qr.js/lib/BitBuffer.js","../node_modules/qr.js/lib/util.js","../node_modules/react-qr-code/lib/components/QRCodeCell/index.js","../node_modules/react-qr-code/lib/components/QRCodeSurface/index.js"],"names":["module","exports","MODE_NUMBER","MODE_ALPHA_NUM","MODE_8BIT_BYTE","MODE_KANJI","L","M","Q","H","math","__webpack_require__","QRPolynomial","num","shift","undefined","length","Error","offset","this","Array","i","prototype","get","index","getLength","multiply","e","j","gexp","glog","mod","ratio","QRMath","n","LOG_TABLE","EXP_TABLE","Object","defineProperty","value","_extends","assign","target","arguments","source","key","hasOwnProperty","call","_QRCode2","_interopRequireDefault","_ErrorCorrectLevel2","_propTypes2","_react","_react2","_QRCodeCell2","_QRCodeSurface2","obj","__esModule","default","propTypes","bgColor","string","fgColor","level","oneOf","size","number","isRequired","QRCode","_ref","props","keys","indexOf","_objectWithoutProperties","qrcode","addData","make","cells","modules","tileSize","createElement","style","height","width","map","row","rowIndex","cell","cellIndex","fill","transformX","Math","round","transformY","qrItemWidth","qrItemHeight","d","defaultProps","memo","BitByte","RSBlock","BitBuffer","util","Polynomial","typeNumber","errorCorrectLevel","moduleCount","dataCache","dataList","proto","data","newData","push","isDark","col","getModuleCount","rsBlocks","getRSBlocks","buffer","totalDataCount","dataCount","put","mode","getLengthInBits","write","makeImpl","getBestMaskPattern","test","maskPattern","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","r","c","minLostPoint","pattern","lostPoint","getLostPoint","createMovieClip","target_mc","instance_name","depth","qr_mc","createEmptyMovieClip","y","x","beginFill","moveTo","lineTo","endFill","pos","getPatternPosition","bits","getBCHTypeNumber","floor","getBCHTypeInfo","inc","bitIndex","byteIndex","dark","getMask","PAD0","PAD1","putBit","createBytes","maxDcCount","maxEcCount","dcdata","ecdata","dcCount","ecCount","totalCount","max","rsPoly","getErrorCorrectPolynomial","modPoly","modIndex","totalCodeCount","QR8bitByte","charCodeAt","ECL","QRRSBlock","RS_BLOCK_TABLE","rsBlock","getRsBlockTable","list","count","QRBitBuffer","bufIndex","bit","Mode","QRMaskPattern","QRUtil","PATTERN_POSITION_TABLE","G15","G18","G15_MASK","getBCHDigit","digit","errorCorrectLength","a","type","qrCode","sameCount","darkCount","abs","QRCodeCell","transform","children","array","object","xmlns","QRCodeSurface"],"mappings":"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","file":"static/js/36.02248e86.chunk.js","sourcesContent":["module.exports = {\n  MODE_NUMBER: 1 << 0,\n  MODE_ALPHA_NUM: 1 << 1,\n  MODE_8BIT_BYTE: 1 << 2,\n  MODE_KANJI: 1 << 3\n};","module.exports = {\n  L: 1,\n  M: 0,\n  Q: 3,\n  H: 2\n};","var math = require('./math');\n\nfunction QRPolynomial(num, shift) {\n  if (num.length == undefined) {\n    throw new Error(num.length + \"/\" + shift);\n  }\n\n  var offset = 0;\n\n  while (offset < num.length && num[offset] == 0) {\n    offset++;\n  }\n\n  this.num = new Array(num.length - offset + shift);\n\n  for (var i = 0; i < num.length - offset; i++) {\n    this.num[i] = num[i + offset];\n  }\n}\n\nQRPolynomial.prototype = {\n  get: function get(index) {\n    return this.num[index];\n  },\n  getLength: function getLength() {\n    return this.num.length;\n  },\n  multiply: function multiply(e) {\n    var num = new Array(this.getLength() + e.getLength() - 1);\n\n    for (var i = 0; i < this.getLength(); i++) {\n      for (var j = 0; j < e.getLength(); j++) {\n        num[i + j] ^= math.gexp(math.glog(this.get(i)) + math.glog(e.get(j)));\n      }\n    }\n\n    return new QRPolynomial(num, 0);\n  },\n  mod: function mod(e) {\n    if (this.getLength() - e.getLength() < 0) {\n      return this;\n    }\n\n    var ratio = math.glog(this.get(0)) - math.glog(e.get(0));\n    var num = new Array(this.getLength());\n\n    for (var i = 0; i < this.getLength(); i++) {\n      num[i] = this.get(i);\n    }\n\n    for (var i = 0; i < e.getLength(); i++) {\n      num[i] ^= math.gexp(math.glog(e.get(i)) + ratio);\n    } // recursive call\n\n\n    return new QRPolynomial(num, 0).mod(e);\n  }\n};\nmodule.exports = QRPolynomial;","var QRMath = {\n  glog: function glog(n) {\n    if (n < 1) {\n      throw new Error(\"glog(\" + n + \")\");\n    }\n\n    return QRMath.LOG_TABLE[n];\n  },\n  gexp: function gexp(n) {\n    while (n < 0) {\n      n += 255;\n    }\n\n    while (n >= 256) {\n      n -= 255;\n    }\n\n    return QRMath.EXP_TABLE[n];\n  },\n  EXP_TABLE: new Array(256),\n  LOG_TABLE: new Array(256)\n};\n\nfor (var i = 0; i < 8; i++) {\n  QRMath.EXP_TABLE[i] = 1 << i;\n}\n\nfor (var i = 8; i < 256; i++) {\n  QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];\n}\n\nfor (var i = 0; i < 255; i++) {\n  QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n}\n\nmodule.exports = QRMath;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _QRCode = require(\"qr.js/lib/QRCode\");\n\nvar _QRCode2 = _interopRequireDefault(_QRCode);\n\nvar _ErrorCorrectLevel = require(\"qr.js/lib/ErrorCorrectLevel\");\n\nvar _ErrorCorrectLevel2 = _interopRequireDefault(_ErrorCorrectLevel);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _QRCodeCell = require(\"./components/QRCodeCell\");\n\nvar _QRCodeCell2 = _interopRequireDefault(_QRCodeCell);\n\nvar _QRCodeSurface = require(\"./components/QRCodeSurface\");\n\nvar _QRCodeSurface2 = _interopRequireDefault(_QRCodeSurface);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n} // A `qr.js` doesn't handle error level of zero (M) so we need to do it right, thus the deep require.\n\n\nvar propTypes = {\n  bgColor: _propTypes2.default.string,\n  fgColor: _propTypes2.default.string,\n  level: _propTypes2.default.oneOf([\"L\", \"M\", \"Q\", \"H\"]),\n  size: _propTypes2.default.number,\n  value: _propTypes2.default.string.isRequired\n};\nvar defaultProps = {\n  bgColor: \"#FFFFFF\",\n  fgColor: \"#000000\",\n  level: \"L\",\n  size: 256\n};\n\nvar QRCode = function QRCode(_ref) {\n  var bgColor = _ref.bgColor,\n      fgColor = _ref.fgColor,\n      level = _ref.level,\n      size = _ref.size,\n      value = _ref.value,\n      props = _objectWithoutProperties(_ref, [\"bgColor\", \"fgColor\", \"level\", \"size\", \"value\"]); // We'll use type === -1 to force QRCode to automatically pick the best type.\n\n\n  var qrcode = new _QRCode2.default(-1, _ErrorCorrectLevel2.default[level]);\n  qrcode.addData(value);\n  qrcode.make();\n  var cells = qrcode.modules;\n  var tileSize = size / cells.length;\n  return _react2.default.createElement(_QRCodeSurface2.default, _extends({}, props, {\n    size: size,\n    style: {\n      height: size,\n      width: size\n    }\n  }), cells.map(function (row, rowIndex) {\n    return row.map(function (cell, cellIndex) {\n      var fill = cell ? fgColor : bgColor;\n      var transformX = Math.round(cellIndex * tileSize);\n      var transformY = Math.round(rowIndex * tileSize);\n      var qrItemWidth = Math.round((cellIndex + 1) * tileSize) - transformX;\n      var qrItemHeight = Math.round((rowIndex + 1) * tileSize) - transformY;\n      var d = \"M 0 0 L \" + qrItemWidth + \" 0 L \" + qrItemWidth + \" \" + qrItemHeight + \" L 0 \" + qrItemHeight + \" Z\";\n      return _react2.default.createElement(_QRCodeCell2.default\n      /* eslint-disable react/no-array-index-key */\n      , {\n        key: \"rectangle-\" + rowIndex + \"-\" + cellIndex\n        /* eslint-enable react/no-array-index-key */\n        ,\n        d: d,\n        fill: fill,\n        transformX: transformX,\n        transformY: transformY\n      });\n    });\n  }));\n};\n\nQRCode.propTypes = propTypes;\nQRCode.defaultProps = defaultProps;\nexports.default = (0, _react.memo)(QRCode);","var BitByte = require('./8BitByte');\n\nvar RSBlock = require('./RSBlock');\n\nvar BitBuffer = require('./BitBuffer');\n\nvar util = require('./util');\n\nvar Polynomial = require('./Polynomial');\n\nfunction QRCode(typeNumber, errorCorrectLevel) {\n  this.typeNumber = typeNumber;\n  this.errorCorrectLevel = errorCorrectLevel;\n  this.modules = null;\n  this.moduleCount = 0;\n  this.dataCache = null;\n  this.dataList = [];\n} // for client side minification\n\n\nvar proto = QRCode.prototype;\n\nproto.addData = function (data) {\n  var newData = new BitByte(data);\n  this.dataList.push(newData);\n  this.dataCache = null;\n};\n\nproto.isDark = function (row, col) {\n  if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n    throw new Error(row + \",\" + col);\n  }\n\n  return this.modules[row][col];\n};\n\nproto.getModuleCount = function () {\n  return this.moduleCount;\n};\n\nproto.make = function () {\n  // Calculate automatically typeNumber if provided is < 1\n  if (this.typeNumber < 1) {\n    var typeNumber = 1;\n\n    for (typeNumber = 1; typeNumber < 40; typeNumber++) {\n      var rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);\n      var buffer = new BitBuffer();\n      var totalDataCount = 0;\n\n      for (var i = 0; i < rsBlocks.length; i++) {\n        totalDataCount += rsBlocks[i].dataCount;\n      }\n\n      for (var i = 0; i < this.dataList.length; i++) {\n        var data = this.dataList[i];\n        buffer.put(data.mode, 4);\n        buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));\n        data.write(buffer);\n      }\n\n      if (buffer.getLengthInBits() <= totalDataCount * 8) break;\n    }\n\n    this.typeNumber = typeNumber;\n  }\n\n  this.makeImpl(false, this.getBestMaskPattern());\n};\n\nproto.makeImpl = function (test, maskPattern) {\n  this.moduleCount = this.typeNumber * 4 + 17;\n  this.modules = new Array(this.moduleCount);\n\n  for (var row = 0; row < this.moduleCount; row++) {\n    this.modules[row] = new Array(this.moduleCount);\n\n    for (var col = 0; col < this.moduleCount; col++) {\n      this.modules[row][col] = null; //(col + row) % 3;\n    }\n  }\n\n  this.setupPositionProbePattern(0, 0);\n  this.setupPositionProbePattern(this.moduleCount - 7, 0);\n  this.setupPositionProbePattern(0, this.moduleCount - 7);\n  this.setupPositionAdjustPattern();\n  this.setupTimingPattern();\n  this.setupTypeInfo(test, maskPattern);\n\n  if (this.typeNumber >= 7) {\n    this.setupTypeNumber(test);\n  }\n\n  if (this.dataCache == null) {\n    this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n  }\n\n  this.mapData(this.dataCache, maskPattern);\n};\n\nproto.setupPositionProbePattern = function (row, col) {\n  for (var r = -1; r <= 7; r++) {\n    if (row + r <= -1 || this.moduleCount <= row + r) continue;\n\n    for (var c = -1; c <= 7; c++) {\n      if (col + c <= -1 || this.moduleCount <= col + c) continue;\n\n      if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n        this.modules[row + r][col + c] = true;\n      } else {\n        this.modules[row + r][col + c] = false;\n      }\n    }\n  }\n};\n\nproto.getBestMaskPattern = function () {\n  var minLostPoint = 0;\n  var pattern = 0;\n\n  for (var i = 0; i < 8; i++) {\n    this.makeImpl(true, i);\n    var lostPoint = util.getLostPoint(this);\n\n    if (i == 0 || minLostPoint > lostPoint) {\n      minLostPoint = lostPoint;\n      pattern = i;\n    }\n  }\n\n  return pattern;\n};\n\nproto.createMovieClip = function (target_mc, instance_name, depth) {\n  var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n  var cs = 1;\n  this.make();\n\n  for (var row = 0; row < this.modules.length; row++) {\n    var y = row * cs;\n\n    for (var col = 0; col < this.modules[row].length; col++) {\n      var x = col * cs;\n      var dark = this.modules[row][col];\n\n      if (dark) {\n        qr_mc.beginFill(0, 100);\n        qr_mc.moveTo(x, y);\n        qr_mc.lineTo(x + cs, y);\n        qr_mc.lineTo(x + cs, y + cs);\n        qr_mc.lineTo(x, y + cs);\n        qr_mc.endFill();\n      }\n    }\n  }\n\n  return qr_mc;\n};\n\nproto.setupTimingPattern = function () {\n  for (var r = 8; r < this.moduleCount - 8; r++) {\n    if (this.modules[r][6] != null) {\n      continue;\n    }\n\n    this.modules[r][6] = r % 2 == 0;\n  }\n\n  for (var c = 8; c < this.moduleCount - 8; c++) {\n    if (this.modules[6][c] != null) {\n      continue;\n    }\n\n    this.modules[6][c] = c % 2 == 0;\n  }\n};\n\nproto.setupPositionAdjustPattern = function () {\n  var pos = util.getPatternPosition(this.typeNumber);\n\n  for (var i = 0; i < pos.length; i++) {\n    for (var j = 0; j < pos.length; j++) {\n      var row = pos[i];\n      var col = pos[j];\n\n      if (this.modules[row][col] != null) {\n        continue;\n      }\n\n      for (var r = -2; r <= 2; r++) {\n        for (var c = -2; c <= 2; c++) {\n          if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n            this.modules[row + r][col + c] = true;\n          } else {\n            this.modules[row + r][col + c] = false;\n          }\n        }\n      }\n    }\n  }\n};\n\nproto.setupTypeNumber = function (test) {\n  var bits = util.getBCHTypeNumber(this.typeNumber);\n\n  for (var i = 0; i < 18; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n  }\n\n  for (var i = 0; i < 18; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n  }\n};\n\nproto.setupTypeInfo = function (test, maskPattern) {\n  var data = this.errorCorrectLevel << 3 | maskPattern;\n  var bits = util.getBCHTypeInfo(data); // vertical\t\t\n\n  for (var i = 0; i < 15; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n\n    if (i < 6) {\n      this.modules[i][8] = mod;\n    } else if (i < 8) {\n      this.modules[i + 1][8] = mod;\n    } else {\n      this.modules[this.moduleCount - 15 + i][8] = mod;\n    }\n  } // horizontal\n\n\n  for (var i = 0; i < 15; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n\n    if (i < 8) {\n      this.modules[8][this.moduleCount - i - 1] = mod;\n    } else if (i < 9) {\n      this.modules[8][15 - i - 1 + 1] = mod;\n    } else {\n      this.modules[8][15 - i - 1] = mod;\n    }\n  } // fixed module\n\n\n  this.modules[this.moduleCount - 8][8] = !test;\n};\n\nproto.mapData = function (data, maskPattern) {\n  var inc = -1;\n  var row = this.moduleCount - 1;\n  var bitIndex = 7;\n  var byteIndex = 0;\n\n  for (var col = this.moduleCount - 1; col > 0; col -= 2) {\n    if (col == 6) col--;\n\n    while (true) {\n      for (var c = 0; c < 2; c++) {\n        if (this.modules[row][col - c] == null) {\n          var dark = false;\n\n          if (byteIndex < data.length) {\n            dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n          }\n\n          var mask = util.getMask(maskPattern, row, col - c);\n\n          if (mask) {\n            dark = !dark;\n          }\n\n          this.modules[row][col - c] = dark;\n          bitIndex--;\n\n          if (bitIndex == -1) {\n            byteIndex++;\n            bitIndex = 7;\n          }\n        }\n      }\n\n      row += inc;\n\n      if (row < 0 || this.moduleCount <= row) {\n        row -= inc;\n        inc = -inc;\n        break;\n      }\n    }\n  }\n};\n\nQRCode.PAD0 = 0xEC;\nQRCode.PAD1 = 0x11;\n\nQRCode.createData = function (typeNumber, errorCorrectLevel, dataList) {\n  var rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n  var buffer = new BitBuffer();\n\n  for (var i = 0; i < dataList.length; i++) {\n    var data = dataList[i];\n    buffer.put(data.mode, 4);\n    buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));\n    data.write(buffer);\n  } // calc num max data.\n\n\n  var totalDataCount = 0;\n\n  for (var i = 0; i < rsBlocks.length; i++) {\n    totalDataCount += rsBlocks[i].dataCount;\n  }\n\n  if (buffer.getLengthInBits() > totalDataCount * 8) {\n    throw new Error(\"code length overflow. (\" + buffer.getLengthInBits() + \">\" + totalDataCount * 8 + \")\");\n  } // end code\n\n\n  if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n    buffer.put(0, 4);\n  } // padding\n\n\n  while (buffer.getLengthInBits() % 8 != 0) {\n    buffer.putBit(false);\n  } // padding\n\n\n  while (true) {\n    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n      break;\n    }\n\n    buffer.put(QRCode.PAD0, 8);\n\n    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n      break;\n    }\n\n    buffer.put(QRCode.PAD1, 8);\n  }\n\n  return QRCode.createBytes(buffer, rsBlocks);\n};\n\nQRCode.createBytes = function (buffer, rsBlocks) {\n  var offset = 0;\n  var maxDcCount = 0;\n  var maxEcCount = 0;\n  var dcdata = new Array(rsBlocks.length);\n  var ecdata = new Array(rsBlocks.length);\n\n  for (var r = 0; r < rsBlocks.length; r++) {\n    var dcCount = rsBlocks[r].dataCount;\n    var ecCount = rsBlocks[r].totalCount - dcCount;\n    maxDcCount = Math.max(maxDcCount, dcCount);\n    maxEcCount = Math.max(maxEcCount, ecCount);\n    dcdata[r] = new Array(dcCount);\n\n    for (var i = 0; i < dcdata[r].length; i++) {\n      dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n    }\n\n    offset += dcCount;\n    var rsPoly = util.getErrorCorrectPolynomial(ecCount);\n    var rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);\n    var modPoly = rawPoly.mod(rsPoly);\n    ecdata[r] = new Array(rsPoly.getLength() - 1);\n\n    for (var i = 0; i < ecdata[r].length; i++) {\n      var modIndex = i + modPoly.getLength() - ecdata[r].length;\n      ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n    }\n  }\n\n  var totalCodeCount = 0;\n\n  for (var i = 0; i < rsBlocks.length; i++) {\n    totalCodeCount += rsBlocks[i].totalCount;\n  }\n\n  var data = new Array(totalCodeCount);\n  var index = 0;\n\n  for (var i = 0; i < maxDcCount; i++) {\n    for (var r = 0; r < rsBlocks.length; r++) {\n      if (i < dcdata[r].length) {\n        data[index++] = dcdata[r][i];\n      }\n    }\n  }\n\n  for (var i = 0; i < maxEcCount; i++) {\n    for (var r = 0; r < rsBlocks.length; r++) {\n      if (i < ecdata[r].length) {\n        data[index++] = ecdata[r][i];\n      }\n    }\n  }\n\n  return data;\n};\n\nmodule.exports = QRCode;","var mode = require('./mode');\n\nfunction QR8bitByte(data) {\n  this.mode = mode.MODE_8BIT_BYTE;\n  this.data = data;\n}\n\nQR8bitByte.prototype = {\n  getLength: function getLength(buffer) {\n    return this.data.length;\n  },\n  write: function write(buffer) {\n    for (var i = 0; i < this.data.length; i++) {\n      // not JIS ...\n      buffer.put(this.data.charCodeAt(i), 8);\n    }\n  }\n};\nmodule.exports = QR8bitByte;","// ErrorCorrectLevel\nvar ECL = require('./ErrorCorrectLevel');\n\nfunction QRRSBlock(totalCount, dataCount) {\n  this.totalCount = totalCount;\n  this.dataCount = dataCount;\n}\n\nQRRSBlock.RS_BLOCK_TABLE = [// L\n// M\n// Q\n// H\n// 1\n[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], // 2\n[1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], // 3\n[1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], // 4\t\t\n[1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], // 5\n[1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], // 6\n[2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], // 7\t\t\n[2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], // 8\n[2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], // 9\n[2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], // 10\t\t\n[2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], // 11\n[4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], // 12\n[2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], // 13\n[4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], // 14\n[3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], // 15\n[5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], // 16\n[5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], // 17\n[1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], // 18\n[5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], // 19\n[3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], // 20\n[3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], // 21\n[4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], // 22\n[2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], // 23\n[4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], // 24\n[6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], // 25\n[8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], // 26\n[10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], // 27\n[8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], // 28\n[3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], // 29\n[7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], // 30\n[5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], // 31\n[13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], // 32\n[17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], // 33\n[17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], // 34\n[13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], // 35\n[12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], // 36\n[6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], // 37\n[17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], // 38\n[4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], // 39\n[20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], // 40\n[19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n\nQRRSBlock.getRSBlocks = function (typeNumber, errorCorrectLevel) {\n  var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n\n  if (rsBlock == undefined) {\n    throw new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + errorCorrectLevel);\n  }\n\n  var length = rsBlock.length / 3;\n  var list = new Array();\n\n  for (var i = 0; i < length; i++) {\n    var count = rsBlock[i * 3 + 0];\n    var totalCount = rsBlock[i * 3 + 1];\n    var dataCount = rsBlock[i * 3 + 2];\n\n    for (var j = 0; j < count; j++) {\n      list.push(new QRRSBlock(totalCount, dataCount));\n    }\n  }\n\n  return list;\n};\n\nQRRSBlock.getRsBlockTable = function (typeNumber, errorCorrectLevel) {\n  switch (errorCorrectLevel) {\n    case ECL.L:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n\n    case ECL.M:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n\n    case ECL.Q:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n\n    case ECL.H:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n\n    default:\n      return undefined;\n  }\n};\n\nmodule.exports = QRRSBlock;","function QRBitBuffer() {\n  this.buffer = new Array();\n  this.length = 0;\n}\n\nQRBitBuffer.prototype = {\n  get: function get(index) {\n    var bufIndex = Math.floor(index / 8);\n    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n  },\n  put: function put(num, length) {\n    for (var i = 0; i < length; i++) {\n      this.putBit((num >>> length - i - 1 & 1) == 1);\n    }\n  },\n  getLengthInBits: function getLengthInBits() {\n    return this.length;\n  },\n  putBit: function putBit(bit) {\n    var bufIndex = Math.floor(this.length / 8);\n\n    if (this.buffer.length <= bufIndex) {\n      this.buffer.push(0);\n    }\n\n    if (bit) {\n      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n    }\n\n    this.length++;\n  }\n};\nmodule.exports = QRBitBuffer;","var Mode = require('./mode');\n\nvar Polynomial = require('./Polynomial');\n\nvar math = require('./math');\n\nvar QRMaskPattern = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n};\nvar QRUtil = {\n  PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],\n  G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,\n  G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,\n  G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,\n  getBCHTypeInfo: function getBCHTypeInfo(data) {\n    var d = data << 10;\n\n    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n      d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);\n    }\n\n    return (data << 10 | d) ^ QRUtil.G15_MASK;\n  },\n  getBCHTypeNumber: function getBCHTypeNumber(data) {\n    var d = data << 12;\n\n    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n      d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);\n    }\n\n    return data << 12 | d;\n  },\n  getBCHDigit: function getBCHDigit(data) {\n    var digit = 0;\n\n    while (data != 0) {\n      digit++;\n      data >>>= 1;\n    }\n\n    return digit;\n  },\n  getPatternPosition: function getPatternPosition(typeNumber) {\n    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n  },\n  getMask: function getMask(maskPattern, i, j) {\n    switch (maskPattern) {\n      case QRMaskPattern.PATTERN000:\n        return (i + j) % 2 == 0;\n\n      case QRMaskPattern.PATTERN001:\n        return i % 2 == 0;\n\n      case QRMaskPattern.PATTERN010:\n        return j % 3 == 0;\n\n      case QRMaskPattern.PATTERN011:\n        return (i + j) % 3 == 0;\n\n      case QRMaskPattern.PATTERN100:\n        return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n\n      case QRMaskPattern.PATTERN101:\n        return i * j % 2 + i * j % 3 == 0;\n\n      case QRMaskPattern.PATTERN110:\n        return (i * j % 2 + i * j % 3) % 2 == 0;\n\n      case QRMaskPattern.PATTERN111:\n        return (i * j % 3 + (i + j) % 2) % 2 == 0;\n\n      default:\n        throw new Error(\"bad maskPattern:\" + maskPattern);\n    }\n  },\n  getErrorCorrectPolynomial: function getErrorCorrectPolynomial(errorCorrectLength) {\n    var a = new Polynomial([1], 0);\n\n    for (var i = 0; i < errorCorrectLength; i++) {\n      a = a.multiply(new Polynomial([1, math.gexp(i)], 0));\n    }\n\n    return a;\n  },\n  getLengthInBits: function getLengthInBits(mode, type) {\n    if (1 <= type && type < 10) {\n      // 1 - 9\n      switch (mode) {\n        case Mode.MODE_NUMBER:\n          return 10;\n\n        case Mode.MODE_ALPHA_NUM:\n          return 9;\n\n        case Mode.MODE_8BIT_BYTE:\n          return 8;\n\n        case Mode.MODE_KANJI:\n          return 8;\n\n        default:\n          throw new Error(\"mode:\" + mode);\n      }\n    } else if (type < 27) {\n      // 10 - 26\n      switch (mode) {\n        case Mode.MODE_NUMBER:\n          return 12;\n\n        case Mode.MODE_ALPHA_NUM:\n          return 11;\n\n        case Mode.MODE_8BIT_BYTE:\n          return 16;\n\n        case Mode.MODE_KANJI:\n          return 10;\n\n        default:\n          throw new Error(\"mode:\" + mode);\n      }\n    } else if (type < 41) {\n      // 27 - 40\n      switch (mode) {\n        case Mode.MODE_NUMBER:\n          return 14;\n\n        case Mode.MODE_ALPHA_NUM:\n          return 13;\n\n        case Mode.MODE_8BIT_BYTE:\n          return 16;\n\n        case Mode.MODE_KANJI:\n          return 12;\n\n        default:\n          throw new Error(\"mode:\" + mode);\n      }\n    } else {\n      throw new Error(\"type:\" + type);\n    }\n  },\n  getLostPoint: function getLostPoint(qrCode) {\n    var moduleCount = qrCode.getModuleCount();\n    var lostPoint = 0; // LEVEL1\n\n    for (var row = 0; row < moduleCount; row++) {\n      for (var col = 0; col < moduleCount; col++) {\n        var sameCount = 0;\n        var dark = qrCode.isDark(row, col);\n\n        for (var r = -1; r <= 1; r++) {\n          if (row + r < 0 || moduleCount <= row + r) {\n            continue;\n          }\n\n          for (var c = -1; c <= 1; c++) {\n            if (col + c < 0 || moduleCount <= col + c) {\n              continue;\n            }\n\n            if (r == 0 && c == 0) {\n              continue;\n            }\n\n            if (dark == qrCode.isDark(row + r, col + c)) {\n              sameCount++;\n            }\n          }\n        }\n\n        if (sameCount > 5) {\n          lostPoint += 3 + sameCount - 5;\n        }\n      }\n    } // LEVEL2\n\n\n    for (var row = 0; row < moduleCount - 1; row++) {\n      for (var col = 0; col < moduleCount - 1; col++) {\n        var count = 0;\n        if (qrCode.isDark(row, col)) count++;\n        if (qrCode.isDark(row + 1, col)) count++;\n        if (qrCode.isDark(row, col + 1)) count++;\n        if (qrCode.isDark(row + 1, col + 1)) count++;\n\n        if (count == 0 || count == 4) {\n          lostPoint += 3;\n        }\n      }\n    } // LEVEL3\n\n\n    for (var row = 0; row < moduleCount; row++) {\n      for (var col = 0; col < moduleCount - 6; col++) {\n        if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    for (var col = 0; col < moduleCount; col++) {\n      for (var row = 0; row < moduleCount - 6; row++) {\n        if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {\n          lostPoint += 40;\n        }\n      }\n    } // LEVEL4\n\n\n    var darkCount = 0;\n\n    for (var col = 0; col < moduleCount; col++) {\n      for (var row = 0; row < moduleCount; row++) {\n        if (qrCode.isDark(row, col)) {\n          darkCount++;\n        }\n      }\n    }\n\n    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n    lostPoint += ratio * 10;\n    return lostPoint;\n  }\n};\nmodule.exports = QRUtil;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar propTypes = {\n  d: _propTypes2.default.string.isRequired,\n  fill: _propTypes2.default.string.isRequired,\n  transformX: _propTypes2.default.number.isRequired,\n  transformY: _propTypes2.default.number.isRequired\n};\nvar defaultProps = {};\n\nvar QRCodeCell = function QRCodeCell(_ref) {\n  var d = _ref.d,\n      fill = _ref.fill,\n      transformX = _ref.transformX,\n      transformY = _ref.transformY;\n  return _react2.default.createElement(\"path\", {\n    d: d,\n    fill: fill,\n    transform: \"matrix(\" + [1, 0, 0, 1, transformX, transformY] + \")\"\n  });\n};\n\nQRCodeCell.propTypes = propTypes;\nQRCodeCell.defaultProps = defaultProps;\nexports.default = QRCodeCell;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar propTypes = {\n  children: _propTypes2.default.array.isRequired,\n  size: _propTypes2.default.number.isRequired,\n  style: _propTypes2.default.object,\n  xmlns: _propTypes2.default.string\n};\nvar defaultProps = {\n  style: undefined,\n  xmlns: \"http://www.w3.org/2000/svg\"\n};\n\nvar QRCodeSurface = function QRCodeSurface(_ref) {\n  var children = _ref.children,\n      size = _ref.size,\n      style = _ref.style,\n      xmlns = _ref.xmlns,\n      props = _objectWithoutProperties(_ref, [\"children\", \"size\", \"style\", \"xmlns\"]);\n\n  return _react2.default.createElement(\"svg\", _extends({}, props, {\n    height: size,\n    style: style,\n    width: size,\n    xmlns: xmlns\n  }), children);\n};\n\nQRCodeSurface.propTypes = propTypes;\nQRCodeSurface.defaultProps = defaultProps;\nexports.default = QRCodeSurface;"],"sourceRoot":""}